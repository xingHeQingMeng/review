// 移动端延迟点击
/**
 * 原因： 为了确定用户要做单击还是双击或是其他操作，因此，移动端当你点击是会有300ms延迟，为了等待判断用户的下一步操作是什么
 *
 * 解决方案：
 * 1. 禁用缩放
 *  <meta name='viewport' content='user-scalable=no' />
 *  <meta name='viewport' cpmtemt='initial-scale=1,maximum-sacle=1'/>
 * 当HTML头部包含以上meta标签时，表明这个页面是不可缩放的。那双击缩放的功能就没有意义了，
 * 此时浏览器可以禁用默认的双击缩放行为，并且去掉300ms的点击延迟
 * 弊端 完全无法缩放
 * 
 * 2. 更改默认的视口宽度
 * <meta name='viewport' content='width=device-width'/>
 * 一开始，为了让桌面站点能够在移动端浏览器正常显示，
 * 移动端浏览器默认的视口宽度并不等于设备浏览器视窗宽度，
 * 而是要比设备浏览器视窗宽度大，通常是 980px。
 * 我们可以通过以下标签来设置视口宽度为设备宽度。
 * 因为双击缩放主要是用来改善桌面站点在移动端浏览体验的，而随着响应式设计的普及，很多站点都已经对移动端做过适配和优化了。
 * 这个时候就不需要双击缩放了，如果能够识别出一个网站是响应式的网站，那么移动端浏览器就可以自动禁掉默认的双击缩放行为，并去除300ms延迟。
 * 若果设置了上述meta标签，那么浏览器就可以认为该网站已经对移动端做过了适配，就无需栓妈个鸡缩放操作了
 * 这个好处在于，他没有完全禁用缩放，只是仅用了浏览器默认的双击缩放行为，
 * 用户仍然可以通过双指缩放操作来缩放页面
 * 
 * 3. CSS touch-action
 * 跟 300ms 点击延迟有关的，是touch-action这个css属性。
 * 这个属性指定了相应元素上能够出发的用户代理，也就是浏览器的默认行为。
 * 如果将该属性值设置为 touch-action:none;
 * 就表示在该元素上的操作不会触发用户代理的任何默认行为，就无需进行300ms的延迟判断
 * 
 * 4. fastclick库解决
 * 最后，我们还可以使用一些插件来解决这个问题，比如 fastclick。
 * fastclick 是 FT Labs 专门为解决移动端浏览器 300ms 点击延迟问题所开发的一个轻量级的库。
 * fastclick 的实现原理是在检测到 touchend 事件的时候，会通过DOM自定义事件立即发出模拟一个 click 事件，
 * 并把浏览器在300ms之后的 click 事件组织掉
 * 
 */
