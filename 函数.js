/**
 * 箭头函数和普通函数的区别
 * 箭头函数没有 prototype，没有自己的 this， 继承的是外部代码块的 this
 * 不可以当作构造函数，即不可以使用 new 命令，否则会报错
 * 不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以使用收集参数的形式替代
 * 不可以使用 yield 命令，因此箭头函数不能用作 Generator（生成器）
 * 因为没有 this，所以不能使用 call， bind， apply 来改变 this 的指向
 */

// 柯里化函数
/**
 * 所谓柯里化函数，指的是，把接收多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数
 *
 * 优点
 *  - 参数复用：例如 一个函数有两个参数，但是第一个参数会反复被使用，柯里化后，仅需输入一个参数就可以了
 *  - 提前确认： 提前定义好一个参数，也就决定了整个函数程序的执行防线，避免每次执行判断比较等
 * 缺点：
 *  - 只能提前定义一个参数，如果想要提前定义多个参数，这样的语法是不支持的
 * 
 * 柯里化函数执行效能上的问题：
 *  存取arguments通常要比存取命名参数要慢一点
 *  一些老版本的浏览器在 arguments.length 的实现上是箱单慢的
 *  使用 函数.apply 和 函数.call 通常比 fn() 稍微慢点
 *  创建大量嵌套作用域和闭包函数会带来花销，无论是在内存上还是速度上
 */


/**
 * 普通函数
 */
function add(x, y) {
  return x + y;
}
add(1, 2); // 3
/**
 * 柯里化函数
 */
function addCurry(x) {
  return (y) => {
    return x + y;
  };
}
addCurry(1)(2); //3
