// vue 操作真实 dom 性能瓶颈
/**
 * vue 性能平静的几种情况
 * 1. 一次渲染大量的数据的时候，存在大量数据并且都是复杂类型的时候，
 *    会导致 vue 对数据劫持的时间和渲染时间边长，js连续执行时间过长，会导致页面长时间无法交互。
 *    而且渲染时间太慢，用户一次反馈的时间过长
 *    - 优化方案
 *    可以使用 requestAnimation 这个方法，将数据进行分割，分批次渲染，减少了 js 的连续运行时间，
 *    并且加快了渲染时间。利用加长总时间换取了渲染时间，用户及能快速得到反馈，而且不会因为过长的js运行无法与页面交互
 * 
 * 2. 当页面中存在大量数据，只是修改了一小部分也会导致页面卡顿，因为vue的更新以组件为颗粒度进行更新，
 *    只要修改了当前组件中所使用的数据，组件就会整个去进行更新，造成大量的时间浪费
 *    - 优化方案
 *    将不同的模块划分成不同的组件，这样有效降低虚拟 dom 的 diff 运算时间过长的问题，
 *    比如，将大量数据的模块单独放一个组件，其他放一个组件，由于 vue 是以组建为粒度更新，
 *    修改其他组件的情况下，不会导致当前组件的重新 diff，提升页面响应速度，效果明显
 * 
 * 3. 动态插槽作用域或者静态插槽的更新
 *    使用插槽作用于来替换这两种操作方式，一样能提升性能，因为使用插槽作用域之后，插槽内容会被封装到一个函数中，
 *    被子组件渲染而不是在父组件。
 */