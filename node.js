// 浏览器和 node 的区别
/**
 * 一、全局环境下 this 的指向
 *  在 node 环境中，this 指向 global 而在浏览器中，this 指向window
 *  而且在浏览器中，window 下封装了很多 API 例如 alert 、document、location、history 等
 * 
 * 二、 js引擎
 *  - 在浏览器中，不同的浏览器厂商提供了不同的浏览器内核，浏览器以来这些内核解析解释我们编写的js。
 *  但是，考虑到不同的内核的少量差异，我们需要对兼容性问题。好在有一些有些的库帮助我们处理这个问题，比如jquery、underscore等
 *  - nodejs 是基于 chromes Javascript runtime ，也就是说，实际上它是对 GoogoleV8 引擎进行了封装
 *  nodejs 并不是提供简单的封装，然后提供API调用。Node 对一些特殊用力进行了优化，提供了替代的API，是的V8在非浏览器环境下运行的更好。
 *  例如，在服务器环境中，处理二进制数据通常是必不可少的，但 Javascript 对此支持不足，因此 V8.node 增加了 Buffer 类，方便并且高效的处理二进制数据。
 *  因此，node不仅仅简单的使用了 V8 还对其进行了优化，使其在各环境下更加给力
 * 
 * 三、dom 操作
 *  浏览器中的js大多数情况下是在直接或间接地操作DOM，因为浏览器中的代码主要是在表现层工作。
 *  但是 node 作为一门服务端技术，没有一个前台页面，所以我们不会在 node 中操作 DOM
 * 
 * 四、I/O的读写
 *  与浏览器不同，我们需要像其他服务端技术一样读写文件，nodejs提供了比较方便的组件。
 *  而浏览器想在页面中直接打开一个本地的图片就麻烦了好多。
 * 
 * 五、模块加载
 *  javascript 有个特点，就是原生没提供包引用的 API 一次性要把加载的东西全执行一遍。
 *  所有东西都在一起，没有分而治之，搞得特别没有逻辑性。如果页面简单或者网站当然可以通过一些AMD、CMD 的js库搞定
 *  node中提供了CMD模块加载的API
 *  node 还提供了 npm 这种包管理工具，能够有效方便的管理我们引用的库
 */